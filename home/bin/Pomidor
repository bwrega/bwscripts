#!/usr/bin/env fish

function notify
	notify-send -t 20000 $argv
end

function beepShort
	beep -r 2 -D 100
end

function beepLong
	beepShort
	for f in (seq 100 100 3000) ; echo "-f $f -l 17 -n " ; end | xargs beep
end

function beepTick
	beep -f 40 -l 80 -d 0 &
end

set nrPomidora $argv[1]
if [ -z "$nrPomidora" -o "$nrPomidora" = "--help" -o "$nrPomidora" = "-h" ]
	echo \
	'Użycie: Pomidor nr_pomidora
	Np. 
	Pomidor 1
	Pomidor 2
	(...)
	Pomidor 4
	Pomidor 5

	Zakończenie interwałów podzielnych przez cztery sygnalizowane jest dłuższym beepnięciem.
	Dzięki ustawianiu numerów większych niż cztery możemy na koniec dnia podliczyć, ile czasu przepracowaliśmy.
	Np. jeśli ostatni pomidor miał numer 9, to oznacza że przepracowaliśmy cztery i pół godziny.

	Jeśli realizujemy dwa projekty (np. pet store i library), to warto zrobić sobie dowiązania symboliczne do skryptu Pomidor:
	ln -s Pomidor PomidorPetStore
	ln -s Pomidor PomidorLibrary
	I uruchamiać Pomidora z tych linków:
	PomidorPetStore 1
	PomidorPetStore 2
	(...)
	Dzięki temu jesteśmy w stanie podliczyć czas oddzielnie dla każdego z projektów.
	
	Polecam uruchamiać Pomidora w sessji screena:
	screen -S Pomidor
	i w uruchomionym screenie:
	Pomidor 1
	Pomidor 2
	(...)
	Dzięki temu bieżący pomidor może przetrwać ewentualny restart Xów.' 1>&2
	exit 1
end

set required beep notify-send
for program in $required
	if [ -z (which $program 2>/dev/null) ]
		echo Do działania wymagany jest program $program
		echo Zainstaluj go z repozytorium swojej dystrybucji systemu operacyjnego
		exit 1
	end
end

echo Wciśnij ENTER żeby zrobić pauzę
echo

set pomidorTime 25 #minut
set sleepTick 5    #sekund
set ticksPerMinute (math "60/$sleepTick")

for minuta in (seq $pomidorTime -1 1)
	printf "Zostało %2d minut " $minuta
	for i in (seq $ticksPerMinute)
		set startTick (date +%s.%N)
		if bash -c "read -t $sleepTick"
			set timeLeft (math (date +%s.%N) - $startTick)
			echo Pauza!
			echo Wciśnij Enter żeby wznowić POMIDORA
			bash -c "read"
			echo Wznawiam...
			sleep $timeLeft
		end
		echo -n + #tick
		beepTick
	end
	echo # newline
end

echo # newline
set pomidorEnd "Koniec pomidora nr $nrPomidora"
echo $pomidorEnd

sleep 0.5 #wait for background beep
if [ (math "$nrPomidora"%4) = 0 ]
	set longerBreak 'Zrób sobie dłuższą przerwę!'
	echo $longerBreak
	notify-send "$pomidorEnd" "$longerBreak"
	beepLong
else
	notify-send "$pomidorEnd"
	beepShort
end
